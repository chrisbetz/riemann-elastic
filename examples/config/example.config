(require '[riemann.elastic :as elastic])
; vim: filetype=clojure

; In this config, we'll start pushing data from Riemann into ElasticSearch
; This will give you the ability to store historical time series data
; for selected streams.

; We'll use the Riemann Elastic Search plugin from tnn1t1s 
; https://github.com/tnn1t1s/riemann-elastic
(def elastic-url "http://localhost:9200")
(def elastic-conn (when (seq elastic-url) (elastic/es-connection elastic-url)))

; A generic indexing function with default ttl
(def default-index (default :ttl 300 (index)))

; define a 'sink' that writes to elastic search
(def elastic-sink 
  "write events to elastic search and the Riemann index"
  (let [sinks [(async-queue! :elastic-search
                             {:queue-size 10000}
                             (batch 200 10 (elastic/es-index "riemann-elastic")))]]
    (fn [e]
      (call-rescue e sinks))))

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(logging/init {:file "riemann.log"})
(let [host "127.0.0.1"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server {:host host}))

; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(let [index (index)]
  (streams
    ; send 'foo' to the default index and elastic
    (with :service "foo" default-index elastic-sink)
    ; send 'bar' to the default index only
    (with :service "bar" default-index)))
